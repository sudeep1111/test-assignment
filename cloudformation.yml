AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3SSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: 
                  - ssm:GetParameter
                Resource: arn:aws:ssm:*:*:parameter/UserName
              - Effect: Allow
                Action: 
                  - s3:PutObject
                Resource: arn:aws:s3:::dxt-assignment/*
  ExerciseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def handler(event, context):
              ssm = boto3.client('ssm')
              s3 = boto3.client('s3')
              
              parameter = ssm.get_parameter(Name='UserName', WithDecryption=False)
              user_name = parameter['Parameter']['Value']
              
              bucket_name = os.environ['BUCKET_NAME']
              file_name = 'username.txt'
              
              s3.put_object(Bucket=bucket_name, Key=file_name, Body=user_name)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Successfully stored the SSM Parameter in S3!')
              }

      Runtime: python3.8
      Environment:
        Variables:
          BUCKET_NAME: dxt-assignment
      Timeout: 60
      Events:
        CFNInvoke:
          Type: Custom::Invoke
          Properties:
            ServiceToken: !GetAtt ExerciseLambda.Arn
            UserName: UserName
Outputs:
  LambdaFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt ExerciseLambda.Arn
